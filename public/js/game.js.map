{"version":3,"sources":["../../src/js/game.js"],"names":["mainElement","document","drawMessage","initGameState","state","turn","winner","winnerColor","full","board","colHtml","colsHtml","boardElement","generateBoardHtml","htmlElement","htmlboard","indexEmpty","colList","acc","value","console","checkFull","row","fullCheck","drawBoard","event","newDrop","dropStone","fullCheckChecker","changeTurn","stateMessage"],"mappings":"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","sourcesContent":["// html elements\r\nlet mainElement = document.querySelector('main');\r\nconst drawMessage = document.querySelector('.drawMessage');\r\n\r\ninitGameState();\r\n\r\nlet state = {\r\n  turn: 'yellow',\r\n  winner: false,\r\n  winnerColor: null,\r\n  full: false,\r\n  board: [\r\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\r\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\r\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\r\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\r\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\r\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\r\n    ['empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\r\n  ]\r\n};\r\n\r\nfunction generateBoardHtml(board) {\r\n  return board.reduce(function (colsHtml, col, colIndex) {\r\n    let colHtml = '<div class=\"col\" data-index=\"'+ colIndex +'\">';\r\n    colHtml += col.reduce(function (rowsHtml, row, rowIndex) {\r\n      return '<div class=\"row ' + row + '\"></div>' + rowsHtml;\r\n    }, '');\r\n    colHtml += '</div>';\r\n    return colsHtml + colHtml;\r\n  }, '');\r\n}\r\nfunction drawBoard(board, turn, htmlElement, boardElement) {\r\n  if(!boardElement){\r\n    boardElement = document.createElement('div');\r\n  }\r\n  boardElement.id = 'board';\r\n  boardElement.classList.add(turn);\r\n  boardElement.innerHTML = generateBoardHtml(board);\r\n  htmlElement.appendChild(boardElement);\r\n  return boardElement;\r\n}\r\n\r\nfunction changeTurn(state, col) {\r\n  if(state.turn === 'yellow'){\r\n    state.turn = 'red';\r\n    htmlboard.classList.remove('yellow');\r\n    htmlboard.classList.add('red');\r\n  } else {\r\n    state.turn = 'yellow';\r\n    htmlboard.classList.remove('red');\r\n    htmlboard.classList.add('yellow');\r\n  }\r\n\r\n\r\n\r\n  return state;\r\n}\r\n\r\nfunction dropStone(colList,state) {\r\n\r\n  const indexEmpty = state.board[colList.dataset.index].reduce(function (acc,value,index) {\r\n   if(acc === false){\r\n     if(value === 'empty'){\r\n       return index;\r\n     }else {\r\n       return acc;\r\n     }\r\n   } else {\r\n     return acc;\r\n   }\r\n }, false);\r\n\r\n  if (indexEmpty === false){\r\n    return false;\r\n  } else {\r\n    state.board[colList.dataset.index][indexEmpty] = state.turn;\r\n    console.log(state.board);\r\n    return state;\r\n  }\r\n\r\n}\r\n\r\nfunction fullCheck(board) {\r\n  let checkFull = board.reduce(function (colsHtml, col, colIndex){\r\n    return col.reduce(function (acc,row,rowIndex) {\r\n      if(row === 'empty'){\r\n        return false;\r\n      } else {\r\n        return acc;\r\n      }\r\n    }, colsHtml);\r\n  }, true);\r\n    return checkFull;\r\n}\r\n\r\nfunction initGameState(){\r\n  state = {\r\n    turn: 'yellow',\r\n    winner: false,\r\n    winnerColor: null,\r\n    full: false,\r\n    board: [\r\n      ['empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\r\n      ['empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\r\n      ['empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\r\n      ['empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\r\n      ['empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\r\n      ['empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\r\n      ['empty', 'empty', 'empty', 'empty', 'empty', 'empty'],\r\n    ]\r\n  }\r\n}\r\n\r\nfunction fullCheckChecker(state) {\r\n  if (fullCheck(state.board) === true){\r\n    state.full = true;\r\n  }\r\n  return state;\r\n}\r\n\r\nfunction stateMessage(state) {\r\n  if(state.full === true){\r\n    return \"gelijk\";\r\n  }else if (state.winner === true){\r\n    return \"winner \"+state.winnerColor;\r\n  }\r\n  return \"\"\r\n}\r\n\r\n\r\nlet htmlboard = drawBoard(state.board, state.turn, mainElement)\r\n\r\n\r\nhtmlboard.addEventListener('click', function (event) {\r\n  const colList = event.target.closest('.col');\r\n  if(event.target.matches('.col,.row')) {\r\n    const newDrop = dropStone(colList, state);\r\n    if (newDrop) {\r\n\r\n      state = newDrop;\r\n      state = fullCheckChecker(state);\r\n      state = changeTurn(state);\r\n      drawMessage.textContent = stateMessage(state);\r\n      drawBoard(state.board, state.turn, mainElement, htmlboard);\r\n\r\n    } else if (state.full === true) {\r\n\r\n      initGameState();\r\n      drawBoard(state.board, state.turn, mainElement, htmlboard);\r\n      drawMessage.textContent = stateMessage(state);\r\n\r\n    }\r\n  }\r\n});\r\n\r\n\r\n"],"file":"game.js"}